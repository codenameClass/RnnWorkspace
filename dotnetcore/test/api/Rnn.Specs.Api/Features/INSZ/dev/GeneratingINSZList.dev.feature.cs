// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Rnn.Specs.Api.Features.INSZ.Dev
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GeneratingINSZ_ListDevFeature : object, Xunit.IClassFixture<GeneratingINSZ_ListDevFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GeneratingINSZList.dev.feature"
#line hidden
        
        public GeneratingINSZ_ListDevFeature(GeneratingINSZ_ListDevFeature.FixtureData fixtureData, Rnn_Specs_Api_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/INSZ/dev", "Generating INSZ-list (dev)", "![RNN](https://your-image-url.com/rnn.png)\r\nThis feature validates the generation" +
                    " of Belgian social security numbers (INSZ/RRN).\r\n\r\nLink to feature: [RNN](Rnn.Sp" +
                    "ecs.Api/Features/GeneratingINSZList.feature)", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User attempts to generate an list of random INSZ-numbers exceeding the allowed ap" +
            "i-limit")]
        [Xunit.TraitAttribute("FeatureTitle", "Generating INSZ-list (dev)")]
        [Xunit.TraitAttribute("Description", "User attempts to generate an list of random INSZ-numbers exceeding the allowed ap" +
            "i-limit")]
        [Xunit.TraitAttribute("Category", "technical")]
        [Xunit.TraitAttribute("Category", "expectedtofail")]
        public virtual void UserAttemptsToGenerateAnListOfRandomINSZ_NumbersExceedingTheAllowedApi_Limit()
        {
            string[] tagsOfScenario = new string[] {
                    "technical",
                    "expectedtofail"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User attempts to generate an list of random INSZ-numbers exceeding the allowed ap" +
                    "i-limit", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "amount"});
                table1.AddRow(new string[] {
                            "32301"});
#line 9
 testRunner.When("the users asks for an INSZ generation as", ((string)(null)), table1, "When ");
#line hidden
#line 12
 testRunner.Then("the ask attempt should fail with error \"Internal server error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User attempts to generate an list of random INSZ-numbers exceeding the allowed ap" +
            "i-limit when date is specified with age and sex information included")]
        [Xunit.TraitAttribute("FeatureTitle", "Generating INSZ-list (dev)")]
        [Xunit.TraitAttribute("Description", "User attempts to generate an list of random INSZ-numbers exceeding the allowed ap" +
            "i-limit when date is specified with age and sex information included")]
        [Xunit.TraitAttribute("Category", "technical")]
        [Xunit.TraitAttribute("Category", "experimental")]
        [Xunit.TraitAttribute("Category", "expectedtofail")]
        public virtual void UserAttemptsToGenerateAnListOfRandomINSZ_NumbersExceedingTheAllowedApi_LimitWhenDateIsSpecifiedWithAgeAndSexInformationIncluded()
        {
            string[] tagsOfScenario = new string[] {
                    "technical",
                    "experimental",
                    "expectedtofail"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User attempts to generate an list of random INSZ-numbers exceeding the allowed ap" +
                    "i-limit when date is specified with age and sex information included", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "amount",
                            "date",
                            "info",
                            "adult"});
                table2.AddRow(new string[] {
                            "13925",
                            "2022-10-22",
                            "true",
                            "true"});
#line 16
 testRunner.When("the users asks for an INSZ generation as", ((string)(null)), table2, "When ");
#line hidden
#line 19
 testRunner.Then("the ask attempt should fail with error \"Internal server error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User attempts to generate an list of random INSZ-numbers exceeding the allowed ap" +
            "i-limit with age and sex information included")]
        [Xunit.TraitAttribute("FeatureTitle", "Generating INSZ-list (dev)")]
        [Xunit.TraitAttribute("Description", "User attempts to generate an list of random INSZ-numbers exceeding the allowed ap" +
            "i-limit with age and sex information included")]
        [Xunit.TraitAttribute("Category", "technical")]
        [Xunit.TraitAttribute("Category", "experimental")]
        [Xunit.TraitAttribute("Category", "expectedtofail")]
        public virtual void UserAttemptsToGenerateAnListOfRandomINSZ_NumbersExceedingTheAllowedApi_LimitWithAgeAndSexInformationIncluded()
        {
            string[] tagsOfScenario = new string[] {
                    "technical",
                    "experimental",
                    "expectedtofail"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User attempts to generate an list of random INSZ-numbers exceeding the allowed ap" +
                    "i-limit with age and sex information included", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "amount",
                            "info"});
                table3.AddRow(new string[] {
                            "19887",
                            "true"});
#line 23
 testRunner.When("the users asks for an INSZ generation as", ((string)(null)), table3, "When ");
#line hidden
#line 26
 testRunner.Then("the ask attempt should fail with error \"Internal server error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GeneratingINSZ_ListDevFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GeneratingINSZ_ListDevFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
